
Practica_T5_P1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002300  08002300  00003300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800233c  0800233c  00004038  2**0
                  CONTENTS
  4 .ARM          00000008  0800233c  0800233c  0000333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002344  08002344  00004038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002344  08002344  00003344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002348  08002348  00003348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800234c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004038  2**0
                  CONTENTS
 10 .bss          00000064  20000038  20000038  00004038  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00004038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a2f  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001912  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000760  00000000  00000000  0000e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000058b  00000000  00000000  0000eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002750  00000000  00000000  0000f09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf0f  00000000  00000000  000117eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1428  00000000  00000000  0001d6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000feb22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001bb8  00000000  00000000  000feb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00100720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000038 	.word	0x20000038
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080022e8 	.word	0x080022e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000003c 	.word	0x2000003c
 80001e8:	080022e8 	.word	0x080022e8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <delayInit>:
 * El proposito es inicializa un delay de inicio para cada uno de los componentes
 * @delay_t la estructura que almacena el delay
 * @tick_t la duracion del elemento
 * return none
 */
void delayInit( delay_t * delay, tick_t duration ){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
	if(delay == NULL) return;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d00b      	beq.n	8000504 <delayInit+0x28>
	delay->startTime=HAL_GetTick();
 80004ec:	f000 f9ee 	bl	80008cc <HAL_GetTick>
 80004f0:	4602      	mov	r2, r0
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	601a      	str	r2, [r3, #0]
	delay->duration=duration;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	683a      	ldr	r2, [r7, #0]
 80004fa:	605a      	str	r2, [r3, #4]
	delay->running=false;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	721a      	strb	r2, [r3, #8]
 8000502:	e000      	b.n	8000506 <delayInit+0x2a>
	if(delay == NULL) return;
 8000504:	bf00      	nop

}
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <uartInit>:


UART_HandleTypeDef uart_master;
uint8_t WELCOME_MESSAGE[]= "INICIALIZACION DE UART";

bool uartInit(){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0

	  uart_master.Instance        = USART3;
 8000510:	4b13      	ldr	r3, [pc, #76]	@ (8000560 <uartInit+0x54>)
 8000512:	4a14      	ldr	r2, [pc, #80]	@ (8000564 <uartInit+0x58>)
 8000514:	601a      	str	r2, [r3, #0]

	  uart_master.Init.BaudRate   = 115200;
 8000516:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <uartInit+0x54>)
 8000518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800051c:	605a      	str	r2, [r3, #4]
	  uart_master.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <uartInit+0x54>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
	  uart_master.Init.StopBits   = UART_STOPBITS_1;
 8000524:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <uartInit+0x54>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
	  uart_master.Init.Parity 	  = UART_PARITY_NONE;
 800052a:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <uartInit+0x54>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
	  uart_master.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000530:	4b0b      	ldr	r3, [pc, #44]	@ (8000560 <uartInit+0x54>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
	  uart_master.Init.Mode       = UART_MODE_TX_RX;
 8000536:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <uartInit+0x54>)
 8000538:	220c      	movs	r2, #12
 800053a:	615a      	str	r2, [r3, #20]
	  uart_master.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <uartInit+0x54>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&uart_master) != HAL_OK) return false;
 8000542:	4807      	ldr	r0, [pc, #28]	@ (8000560 <uartInit+0x54>)
 8000544:	f001 fa0c 	bl	8001960 <HAL_UART_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <uartInit+0x46>
 800054e:	2300      	movs	r3, #0
 8000550:	e003      	b.n	800055a <uartInit+0x4e>

	  uartSendString(WELCOME_MESSAGE);
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <uartInit+0x5c>)
 8000554:	f000 f80a 	bl	800056c <uartSendString>

	  return true;
 8000558:	2301      	movs	r3, #1
}
 800055a:	4618      	mov	r0, r3
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000054 	.word	0x20000054
 8000564:	40004800 	.word	0x40004800
 8000568:	20000000 	.word	0x20000000

0800056c <uartSendString>:


void uartSendString(uint8_t * pstring){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	while(*pstring) uartSendStringSize(pstring++, 1);
 8000574:	e006      	b.n	8000584 <uartSendString+0x18>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f80a 	bl	8000598 <uartSendStringSize>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f4      	bne.n	8000576 <uartSendString+0xa>
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <uartSendStringSize>:


void uartSendStringSize(uint8_t * pstring, uint16_t size){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&uart_master, pstring, size, TIMEOUT);
 80005a4:	887a      	ldrh	r2, [r7, #2]
 80005a6:	2364      	movs	r3, #100	@ 0x64
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <uartSendStringSize+0x20>)
 80005ac:	f001 fa25 	bl	80019fa <HAL_UART_Transmit>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000054 	.word	0x20000054

080005bc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	@ 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10e      	bne.n	80005ea <BSP_LED_Init+0x2e>
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <BSP_LED_Init+0x94>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000650 <BSP_LED_Init+0x94>)
 80005d6:	f043 0302 	orr.w	r3, r3, #2
 80005da:	6313      	str	r3, [r2, #48]	@ 0x30
 80005dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <BSP_LED_Init+0x94>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e0:	f003 0302 	and.w	r3, r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	e00d      	b.n	8000606 <BSP_LED_Init+0x4a>
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <BSP_LED_Init+0x94>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <BSP_LED_Init+0x94>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <BSP_LED_Init+0x94>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4a12      	ldr	r2, [pc, #72]	@ (8000654 <BSP_LED_Init+0x98>)
 800060a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800060e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000610:	2301      	movs	r3, #1
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000618:	2302      	movs	r3, #2
 800061a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	4a0e      	ldr	r2, [pc, #56]	@ (8000658 <BSP_LED_Init+0x9c>)
 8000620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000624:	f107 0214 	add.w	r2, r7, #20
 8000628:	4611      	mov	r1, r2
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fa90 	bl	8000b50 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4a09      	ldr	r2, [pc, #36]	@ (8000658 <BSP_LED_Init+0x9c>)
 8000634:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	4a06      	ldr	r2, [pc, #24]	@ (8000654 <BSP_LED_Init+0x98>)
 800063c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f000 fc30 	bl	8000ea8 <HAL_GPIO_WritePin>
}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	@ 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	0800231c 	.word	0x0800231c
 8000658:	20000018 	.word	0x20000018

0800065c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <BSP_LED_On+0x2c>)
 800066a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a06      	ldr	r2, [pc, #24]	@ (800068c <BSP_LED_On+0x30>)
 8000672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000676:	2201      	movs	r2, #1
 8000678:	4619      	mov	r1, r3
 800067a:	f000 fc15 	bl	8000ea8 <HAL_GPIO_WritePin>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000018 	.word	0x20000018
 800068c:	0800231c 	.word	0x0800231c

08000690 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <BSP_PB_Init+0xa4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	4a22      	ldr	r2, [pc, #136]	@ (8000734 <BSP_PB_Init+0xa4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b0:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <BSP_PB_Init+0xa4>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80006bc:	79bb      	ldrb	r3, [r7, #6]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d112      	bne.n	80006e8 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80006c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006cc:	2302      	movs	r3, #2
 80006ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80006d0:	2302      	movs	r3, #2
 80006d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <BSP_PB_Init+0xa8>)
 80006d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006dc:	f107 020c 	add.w	r2, r7, #12
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa34 	bl	8000b50 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d11d      	bne.n	800072a <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80006ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 80006f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006fc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <BSP_PB_Init+0xa8>)
 8000702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000706:	f107 020c 	add.w	r2, r7, #12
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fa1f 	bl	8000b50 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000712:	2328      	movs	r3, #40	@ 0x28
 8000714:	b25b      	sxtb	r3, r3
 8000716:	2200      	movs	r2, #0
 8000718:	210f      	movs	r1, #15
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f9e1 	bl	8000ae2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000720:	2328      	movs	r3, #40	@ 0x28
 8000722:	b25b      	sxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f9f8 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  }
}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800
 8000738:	20000024 	.word	0x20000024

0800073c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4b16      	ldr	r3, [pc, #88]	@ (800079c <SystemInit+0x60>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <SystemInit+0x60>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <SystemInit+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a12      	ldr	r2, [pc, #72]	@ (80007a0 <SystemInit+0x64>)
 8000756:	f043 0301 	orr.w	r3, r3, #1
 800075a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <SystemInit+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <SystemInit+0x64>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <SystemInit+0x64>)
 8000768:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 800076c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000770:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <SystemInit+0x64>)
 8000774:	4a0b      	ldr	r2, [pc, #44]	@ (80007a4 <SystemInit+0x68>)
 8000776:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <SystemInit+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <SystemInit+0x64>)
 800077e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000782:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000784:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <SystemInit+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800078a:	4b04      	ldr	r3, [pc, #16]	@ (800079c <SystemInit+0x60>)
 800078c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000790:	609a      	str	r2, [r3, #8]
#endif
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	40023800 	.word	0x40023800
 80007a4:	24003010 	.word	0x24003010

080007a8 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80007ba:	bf00      	nop
 80007bc:	e7fd      	b.n	80007ba <HardFault_Handler+0x4>

080007be <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80007c2:	bf00      	nop
 80007c4:	e7fd      	b.n	80007c2 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80007ca:	bf00      	nop
 80007cc:	e7fd      	b.n	80007ca <BusFault_Handler+0x4>

080007ce <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000804:	f000 f84e 	bl	80008a4 <HAL_IncTick>
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000810:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <HAL_Init+0x34>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <HAL_Init+0x34>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800081a:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <HAL_Init+0x34>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_Init+0x34>)
 8000822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f94f 	bl	8000acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f000 fba4 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023c00 	.word	0x40023c00

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f967 	bl	8000b36 <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f92f 	bl	8000ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000028 	.word	0x20000028
 800089c:	20000030 	.word	0x20000030
 80008a0:	2000002c 	.word	0x2000002c

080008a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_IncTick+0x20>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <HAL_IncTick+0x24>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000030 	.word	0x20000030
 80008c8:	20000098 	.word	0x20000098

080008cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return uwTick;
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <HAL_GetTick+0x14>)
 80008d2:	681b      	ldr	r3, [r3, #0]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	20000098 	.word	0x20000098

080008e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008ec:	f7ff ffee 	bl	80008cc <HAL_GetTick>
 80008f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fc:	d005      	beq.n	800090a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <HAL_Delay+0x44>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800090a:	bf00      	nop
 800090c:	f7ff ffde 	bl	80008cc <HAL_GetTick>
 8000910:	4602      	mov	r2, r0
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d8f7      	bhi.n	800090c <HAL_Delay+0x28>
  {
  }
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000030 	.word	0x20000030

0800092c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000948:	4013      	ands	r3, r2
 800094a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800095c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800095e:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <__NVIC_SetPriorityGrouping+0x44>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	60d3      	str	r3, [r2, #12]
}
 8000964:	bf00      	nop
 8000966:	3714      	adds	r7, #20
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <__NVIC_GetPriorityGrouping+0x18>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	0a1b      	lsrs	r3, r3, #8
 800097e:	f003 0307 	and.w	r3, r3, #7
}
 8000982:	4618      	mov	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0b      	blt.n	80009ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4907      	ldr	r1, [pc, #28]	@ (80009c8 <__NVIC_EnableIRQ+0x38>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	@ (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	@ (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	@ 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	@ 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a98:	d301      	bcc.n	8000a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00f      	b.n	8000abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <SysTick_Config+0x40>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f7ff ff8e 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <SysTick_Config+0x40>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <SysTick_Config+0x40>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff29 	bl	800092c <__NVIC_SetPriorityGrouping>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b086      	sub	sp, #24
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60b9      	str	r1, [r7, #8]
 8000aec:	607a      	str	r2, [r7, #4]
 8000aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af4:	f7ff ff3e 	bl	8000974 <__NVIC_GetPriorityGrouping>
 8000af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f7ff ff8e 	bl	8000a20 <NVIC_EncodePriority>
 8000b04:	4602      	mov	r2, r0
 8000b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <__NVIC_SetPriority>
}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	4603      	mov	r3, r0
 8000b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff31 	bl	8000990 <__NVIC_EnableIRQ>
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffa2 	bl	8000a88 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	@ 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	e177      	b.n	8000e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f040 8166 	bne.w	8000e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d130      	bne.n	8000c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	f003 0201 	and.w	r2, r3, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d017      	beq.n	8000c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d123      	bne.n	8000c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	69b9      	ldr	r1, [r7, #24]
 8000c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0203 	and.w	r2, r3, #3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80c0 	beq.w	8000e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b66      	ldr	r3, [pc, #408]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a65      	ldr	r2, [pc, #404]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b63      	ldr	r3, [pc, #396]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf2:	4a61      	ldr	r2, [pc, #388]	@ (8000e78 <HAL_GPIO_Init+0x328>)
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a58      	ldr	r2, [pc, #352]	@ (8000e7c <HAL_GPIO_Init+0x32c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d037      	beq.n	8000d8e <HAL_GPIO_Init+0x23e>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a57      	ldr	r2, [pc, #348]	@ (8000e80 <HAL_GPIO_Init+0x330>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d031      	beq.n	8000d8a <HAL_GPIO_Init+0x23a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a56      	ldr	r2, [pc, #344]	@ (8000e84 <HAL_GPIO_Init+0x334>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d02b      	beq.n	8000d86 <HAL_GPIO_Init+0x236>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a55      	ldr	r2, [pc, #340]	@ (8000e88 <HAL_GPIO_Init+0x338>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d025      	beq.n	8000d82 <HAL_GPIO_Init+0x232>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a54      	ldr	r2, [pc, #336]	@ (8000e8c <HAL_GPIO_Init+0x33c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d01f      	beq.n	8000d7e <HAL_GPIO_Init+0x22e>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a53      	ldr	r2, [pc, #332]	@ (8000e90 <HAL_GPIO_Init+0x340>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d019      	beq.n	8000d7a <HAL_GPIO_Init+0x22a>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a52      	ldr	r2, [pc, #328]	@ (8000e94 <HAL_GPIO_Init+0x344>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_Init+0x226>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a51      	ldr	r2, [pc, #324]	@ (8000e98 <HAL_GPIO_Init+0x348>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_Init+0x222>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a50      	ldr	r2, [pc, #320]	@ (8000e9c <HAL_GPIO_Init+0x34c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x21e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea0 <HAL_GPIO_Init+0x350>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_Init+0x21a>
 8000d66:	2309      	movs	r3, #9
 8000d68:	e012      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	e010      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d6e:	2308      	movs	r3, #8
 8000d70:	e00e      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d72:	2307      	movs	r3, #7
 8000d74:	e00c      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d76:	2306      	movs	r3, #6
 8000d78:	e00a      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e008      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e004      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_GPIO_Init+0x240>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	f002 0203 	and.w	r2, r2, #3
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	4093      	lsls	r3, r2
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da0:	4935      	ldr	r1, [pc, #212]	@ (8000e78 <HAL_GPIO_Init+0x328>)
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dd2:	4a34      	ldr	r2, [pc, #208]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dfc:	4a29      	ldr	r2, [pc, #164]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e02:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <HAL_GPIO_Init+0x354>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	f67f ae84 	bls.w	8000b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3724      	adds	r7, #36	@ 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	40022400 	.word	0x40022400
 8000ea4:	40013c00 	.word	0x40013c00

08000ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb8:	787b      	ldrb	r3, [r7, #1]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ec4:	e003      	b.n	8000ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	041a      	lsls	r2, r3, #16
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	619a      	str	r2, [r3, #24]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
	...

08000edc <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f08:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	4a14      	ldr	r2, [pc, #80]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_UART_MspInit+0x9c>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8000f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f56:	f7ff fdfb 	bl	8000b50 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8000f5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <HAL_UART_MspInit+0xa0>)
 8000f6c:	f7ff fdf0 	bl	8000b50 <HAL_GPIO_Init>
}
 8000f70:	bf00      	nop
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020c00 	.word	0x40020c00

08000f80 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <HAL_PWREx_EnableOverDrive+0x90>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8001020 <HAL_PWREx_EnableOverDrive+0x90>)
 8000fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_PWREx_EnableOverDrive+0x90>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <HAL_PWREx_EnableOverDrive+0x94>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fbc:	f7ff fc86 	bl	80008cc <HAL_GetTick>
 8000fc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fc2:	e009      	b.n	8000fd8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000fc4:	f7ff fc82 	bl	80008cc <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fd2:	d901      	bls.n	8000fd8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e01f      	b.n	8001018 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fd8:	4b13      	ldr	r3, [pc, #76]	@ (8001028 <HAL_PWREx_EnableOverDrive+0x98>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fe4:	d1ee      	bne.n	8000fc4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	@ (800102c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fec:	f7ff fc6e 	bl	80008cc <HAL_GetTick>
 8000ff0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ff2:	e009      	b.n	8001008 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ff4:	f7ff fc6a 	bl	80008cc <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001002:	d901      	bls.n	8001008 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e007      	b.n	8001018 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001008:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <HAL_PWREx_EnableOverDrive+0x98>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001014:	d1ee      	bne.n	8000ff4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800
 8001024:	420e0040 	.word	0x420e0040
 8001028:	40007000 	.word	0x40007000
 800102c:	420e0044 	.word	0x420e0044

08001030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e267      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d075      	beq.n	800113a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800104e:	4b88      	ldr	r3, [pc, #544]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f003 030c 	and.w	r3, r3, #12
 8001056:	2b04      	cmp	r3, #4
 8001058:	d00c      	beq.n	8001074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105a:	4b85      	ldr	r3, [pc, #532]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	2b08      	cmp	r3, #8
 8001064:	d112      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001066:	4b82      	ldr	r3, [pc, #520]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800106e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001072:	d10b      	bne.n	800108c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	4b7e      	ldr	r3, [pc, #504]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d05b      	beq.n	8001138 <HAL_RCC_OscConfig+0x108>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d157      	bne.n	8001138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e242      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001094:	d106      	bne.n	80010a4 <HAL_RCC_OscConfig+0x74>
 8001096:	4b76      	ldr	r3, [pc, #472]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a75      	ldr	r2, [pc, #468]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e01d      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010ac:	d10c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x98>
 80010ae:	4b70      	ldr	r3, [pc, #448]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a6c      	ldr	r2, [pc, #432]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e00b      	b.n	80010e0 <HAL_RCC_OscConfig+0xb0>
 80010c8:	4b69      	ldr	r3, [pc, #420]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a68      	ldr	r2, [pc, #416]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b66      	ldr	r3, [pc, #408]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a65      	ldr	r2, [pc, #404]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80010da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d013      	beq.n	8001110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fbf0 	bl	80008cc <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fbec 	bl	80008cc <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	@ 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e207      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b5b      	ldr	r3, [pc, #364]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0xc0>
 800110e:	e014      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001110:	f7ff fbdc 	bl	80008cc <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001118:	f7ff fbd8 	bl	80008cc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b64      	cmp	r3, #100	@ 0x64
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1f3      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	4b51      	ldr	r3, [pc, #324]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0xe8>
 8001136:	e000      	b.n	800113a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d063      	beq.n	800120e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001146:	4b4a      	ldr	r3, [pc, #296]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001152:	4b47      	ldr	r3, [pc, #284]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115a:	2b08      	cmp	r3, #8
 800115c:	d11c      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800115e:	4b44      	ldr	r3, [pc, #272]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d116      	bne.n	8001198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116a:	4b41      	ldr	r3, [pc, #260]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d001      	beq.n	8001182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e1c7      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001182:	4b3b      	ldr	r3, [pc, #236]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4937      	ldr	r1, [pc, #220]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001192:	4313      	orrs	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	e03a      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	4b34      	ldr	r3, [pc, #208]	@ (8001274 <HAL_RCC_OscConfig+0x244>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fb91 	bl	80008cc <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ae:	f7ff fb8d 	bl	80008cc <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e1a8      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4925      	ldr	r1, [pc, #148]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	600b      	str	r3, [r1, #0]
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e2:	4b24      	ldr	r3, [pc, #144]	@ (8001274 <HAL_RCC_OscConfig+0x244>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fb70 	bl	80008cc <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f0:	f7ff fb6c 	bl	80008cc <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e187      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	2b00      	cmp	r3, #0
 8001218:	d036      	beq.n	8001288 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d016      	beq.n	8001250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_RCC_OscConfig+0x248>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001228:	f7ff fb50 	bl	80008cc <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001230:	f7ff fb4c 	bl	80008cc <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e167      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_RCC_OscConfig+0x240>)
 8001244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f0      	beq.n	8001230 <HAL_RCC_OscConfig+0x200>
 800124e:	e01b      	b.n	8001288 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_RCC_OscConfig+0x248>)
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff fb39 	bl	80008cc <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	e00e      	b.n	800127c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125e:	f7ff fb35 	bl	80008cc <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d907      	bls.n	800127c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e150      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
 8001270:	40023800 	.word	0x40023800
 8001274:	42470000 	.word	0x42470000
 8001278:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127c:	4b88      	ldr	r3, [pc, #544]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1ea      	bne.n	800125e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 8097 	beq.w	80013c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b81      	ldr	r3, [pc, #516]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b7d      	ldr	r3, [pc, #500]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a7c      	ldr	r2, [pc, #496]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b7a      	ldr	r3, [pc, #488]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b77      	ldr	r3, [pc, #476]	@ (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d118      	bne.n	8001304 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012d2:	4b74      	ldr	r3, [pc, #464]	@ (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a73      	ldr	r2, [pc, #460]	@ (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012de:	f7ff faf5 	bl	80008cc <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e6:	f7ff faf1 	bl	80008cc <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e10c      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f8:	4b6a      	ldr	r3, [pc, #424]	@ (80014a4 <HAL_RCC_OscConfig+0x474>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <HAL_RCC_OscConfig+0x2ea>
 800130c:	4b64      	ldr	r3, [pc, #400]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001310:	4a63      	ldr	r2, [pc, #396]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6713      	str	r3, [r2, #112]	@ 0x70
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x324>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x30c>
 8001322:	4b5f      	ldr	r3, [pc, #380]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001326:	4a5e      	ldr	r2, [pc, #376]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6713      	str	r3, [r2, #112]	@ 0x70
 800132e:	4b5c      	ldr	r3, [pc, #368]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001332:	4a5b      	ldr	r2, [pc, #364]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6713      	str	r3, [r2, #112]	@ 0x70
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0x324>
 800133c:	4b58      	ldr	r3, [pc, #352]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001340:	4a57      	ldr	r2, [pc, #348]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001342:	f023 0301 	bic.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	@ 0x70
 8001348:	4b55      	ldr	r3, [pc, #340]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800134c:	4a54      	ldr	r2, [pc, #336]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800134e:	f023 0304 	bic.w	r3, r3, #4
 8001352:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d015      	beq.n	8001388 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135c:	f7ff fab6 	bl	80008cc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001362:	e00a      	b.n	800137a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001364:	f7ff fab2 	bl	80008cc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e0cb      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137a:	4b49      	ldr	r3, [pc, #292]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0ee      	beq.n	8001364 <HAL_RCC_OscConfig+0x334>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001388:	f7ff faa0 	bl	80008cc <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff fa9c 	bl	80008cc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e0b5      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a6:	4b3e      	ldr	r3, [pc, #248]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ee      	bne.n	8001390 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d105      	bne.n	80013c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b8:	4b39      	ldr	r3, [pc, #228]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	4a38      	ldr	r2, [pc, #224]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a1 	beq.w	8001510 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013ce:	4b34      	ldr	r3, [pc, #208]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d05c      	beq.n	8001494 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d141      	bne.n	8001466 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <HAL_RCC_OscConfig+0x478>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fa70 	bl	80008cc <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fa6c 	bl	80008cc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e087      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	3b01      	subs	r3, #1
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001430:	061b      	lsls	r3, r3, #24
 8001432:	491b      	ldr	r1, [pc, #108]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001438:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <HAL_RCC_OscConfig+0x478>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fa45 	bl	80008cc <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff fa41 	bl	80008cc <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e05c      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0f0      	beq.n	8001446 <HAL_RCC_OscConfig+0x416>
 8001464:	e054      	b.n	8001510 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <HAL_RCC_OscConfig+0x478>)
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fa2e 	bl	80008cc <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001474:	f7ff fa2a 	bl	80008cc <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e045      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001486:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <HAL_RCC_OscConfig+0x470>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0x444>
 8001492:	e03d      	b.n	8001510 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e038      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000
 80014a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <HAL_RCC_OscConfig+0x4ec>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d028      	beq.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d121      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d11a      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80014e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d111      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f2:	085b      	lsrs	r3, r3, #1
 80014f4:	3b01      	subs	r3, #1
 80014f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d107      	bne.n	800150c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001506:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0cc      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b68      	ldr	r3, [pc, #416]	@ (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d90c      	bls.n	800155c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	4b65      	ldr	r3, [pc, #404]	@ (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b63      	ldr	r3, [pc, #396]	@ (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b8      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001574:	4b59      	ldr	r3, [pc, #356]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	4a58      	ldr	r2, [pc, #352]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800157e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158c:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a52      	ldr	r2, [pc, #328]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001596:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b50      	ldr	r3, [pc, #320]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	494d      	ldr	r1, [pc, #308]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d044      	beq.n	8001640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b47      	ldr	r3, [pc, #284]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d119      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e07f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d003      	beq.n	80015de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d107      	bne.n	80015ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	4b3f      	ldr	r3, [pc, #252]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d109      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e06f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ee:	4b3b      	ldr	r3, [pc, #236]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e067      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fe:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f023 0203 	bic.w	r2, r3, #3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	4934      	ldr	r1, [pc, #208]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	4313      	orrs	r3, r2
 800160e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001610:	f7ff f95c 	bl	80008cc <HAL_GetTick>
 8001614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001616:	e00a      	b.n	800162e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001618:	f7ff f958 	bl	80008cc <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e04f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 020c 	and.w	r2, r3, #12
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	429a      	cmp	r2, r3
 800163e:	d1eb      	bne.n	8001618 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001640:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 030f 	and.w	r3, r3, #15
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	429a      	cmp	r2, r3
 800164c:	d20c      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164e:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e032      	b.n	80016ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4916      	ldr	r1, [pc, #88]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	490e      	ldr	r1, [pc, #56]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016a6:	f000 f821 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	490a      	ldr	r1, [pc, #40]	@ (80016e0 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	5ccb      	ldrb	r3, [r1, r3]
 80016ba:	fa22 f303 	lsr.w	r3, r2, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_RCC_ClockConfig+0x1c8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f8bc 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023c00 	.word	0x40023c00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	08002324 	.word	0x08002324
 80016e4:	20000028 	.word	0x20000028
 80016e8:	2000002c 	.word	0x2000002c

080016ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016f0:	b094      	sub	sp, #80	@ 0x50
 80016f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80016f8:	2300      	movs	r3, #0
 80016fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016fc:	2300      	movs	r3, #0
 80016fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001704:	4b79      	ldr	r3, [pc, #484]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d00d      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x40>
 8001710:	2b08      	cmp	r3, #8
 8001712:	f200 80e1 	bhi.w	80018d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0x34>
 800171a:	2b04      	cmp	r3, #4
 800171c:	d003      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x3a>
 800171e:	e0db      	b.n	80018d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001720:	4b73      	ldr	r3, [pc, #460]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001722:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001724:	e0db      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001726:	4b73      	ldr	r3, [pc, #460]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800172a:	e0d8      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800172c:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001736:	4b6d      	ldr	r3, [pc, #436]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d063      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001742:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	099b      	lsrs	r3, r3, #6
 8001748:	2200      	movs	r2, #0
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800174c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800174e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001754:	633b      	str	r3, [r7, #48]	@ 0x30
 8001756:	2300      	movs	r3, #0
 8001758:	637b      	str	r3, [r7, #52]	@ 0x34
 800175a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800175e:	4622      	mov	r2, r4
 8001760:	462b      	mov	r3, r5
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4621      	mov	r1, r4
 8001778:	1a51      	subs	r1, r2, r1
 800177a:	6139      	str	r1, [r7, #16]
 800177c:	4629      	mov	r1, r5
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001790:	4659      	mov	r1, fp
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	4651      	mov	r1, sl
 8001796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179a:	4651      	mov	r1, sl
 800179c:	018a      	lsls	r2, r1, #6
 800179e:	4651      	mov	r1, sl
 80017a0:	ebb2 0801 	subs.w	r8, r2, r1
 80017a4:	4659      	mov	r1, fp
 80017a6:	eb63 0901 	sbc.w	r9, r3, r1
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017be:	4690      	mov	r8, r2
 80017c0:	4699      	mov	r9, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	eb18 0303 	adds.w	r3, r8, r3
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	462b      	mov	r3, r5
 80017cc:	eb49 0303 	adc.w	r3, r9, r3
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80017de:	4629      	mov	r1, r5
 80017e0:	024b      	lsls	r3, r1, #9
 80017e2:	4621      	mov	r1, r4
 80017e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017e8:	4621      	mov	r1, r4
 80017ea:	024a      	lsls	r2, r1, #9
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017f2:	2200      	movs	r2, #0
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80017f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80017fc:	f7fe fcf6 	bl	80001ec <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001808:	e058      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800180a:	4b38      	ldr	r3, [pc, #224]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	099b      	lsrs	r3, r3, #6
 8001810:	2200      	movs	r2, #0
 8001812:	4618      	mov	r0, r3
 8001814:	4611      	mov	r1, r2
 8001816:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001820:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001824:	4642      	mov	r2, r8
 8001826:	464b      	mov	r3, r9
 8001828:	f04f 0000 	mov.w	r0, #0
 800182c:	f04f 0100 	mov.w	r1, #0
 8001830:	0159      	lsls	r1, r3, #5
 8001832:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001836:	0150      	lsls	r0, r2, #5
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4641      	mov	r1, r8
 800183e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001842:	4649      	mov	r1, r9
 8001844:	eb63 0b01 	sbc.w	fp, r3, r1
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001854:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001858:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800185c:	ebb2 040a 	subs.w	r4, r2, sl
 8001860:	eb63 050b 	sbc.w	r5, r3, fp
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	00eb      	lsls	r3, r5, #3
 800186e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001872:	00e2      	lsls	r2, r4, #3
 8001874:	4614      	mov	r4, r2
 8001876:	461d      	mov	r5, r3
 8001878:	4643      	mov	r3, r8
 800187a:	18e3      	adds	r3, r4, r3
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	464b      	mov	r3, r9
 8001880:	eb45 0303 	adc.w	r3, r5, r3
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001892:	4629      	mov	r1, r5
 8001894:	028b      	lsls	r3, r1, #10
 8001896:	4621      	mov	r1, r4
 8001898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800189c:	4621      	mov	r1, r4
 800189e:	028a      	lsls	r2, r1, #10
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018a6:	2200      	movs	r2, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	61fa      	str	r2, [r7, #28]
 80018ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018b0:	f7fe fc9c 	bl	80001ec <__aeabi_uldivmod>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4613      	mov	r3, r2
 80018ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x200>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	0c1b      	lsrs	r3, r3, #16
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	3301      	adds	r3, #1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80018cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80018ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018d6:	e002      	b.n	80018de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80018da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80018dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3750      	adds	r7, #80	@ 0x50
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	00f42400 	.word	0x00f42400
 80018f4:	007a1200 	.word	0x007a1200

080018f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_RCC_GetHCLKFreq+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000028 	.word	0x20000028

08001910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001914:	f7ff fff0 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001918:	4602      	mov	r2, r0
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	4903      	ldr	r1, [pc, #12]	@ (8001934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40023800 	.word	0x40023800
 8001934:	08002334 	.word	0x08002334

08001938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800193c:	f7ff ffdc 	bl	80018f8 <HAL_RCC_GetHCLKFreq>
 8001940:	4602      	mov	r2, r0
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0b5b      	lsrs	r3, r3, #13
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4903      	ldr	r1, [pc, #12]	@ (800195c <HAL_RCC_GetPCLK2Freq+0x24>)
 800194e:	5ccb      	ldrb	r3, [r1, r3]
 8001950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	08002334 	.word	0x08002334

08001960 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e03f      	b.n	80019f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff faa8 	bl	8000edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2224      	movs	r2, #36	@ 0x24
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f929 	bl	8001bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	695a      	ldr	r2, [r3, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80019c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2220      	movs	r2, #32
 80019ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b08a      	sub	sp, #40	@ 0x28
 80019fe:	af02      	add	r7, sp, #8
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4613      	mov	r3, r2
 8001a08:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d17c      	bne.n	8001b14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_UART_Transmit+0x2c>
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e075      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <HAL_UART_Transmit+0x3e>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e06e      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2221      	movs	r2, #33	@ 0x21
 8001a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a4e:	f7fe ff3d 	bl	80008cc <HAL_GetTick>
 8001a52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a68:	d108      	bne.n	8001a7c <HAL_UART_Transmit+0x82>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d104      	bne.n	8001a7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	e003      	b.n	8001a84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8001a8c:	e02a      	b.n	8001ae4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2200      	movs	r2, #0
 8001a96:	2180      	movs	r1, #128	@ 0x80
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f000 f840 	bl	8001b1e <UART_WaitOnFlagUntilTimeout>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e036      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10b      	bne.n	8001ac6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001abc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
 8001ac4:	e007      	b.n	8001ad6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1cf      	bne.n	8001a8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2140      	movs	r1, #64	@ 0x40
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f000 f810 	bl	8001b1e <UART_WaitOnFlagUntilTimeout>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e006      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b14:	2302      	movs	r3, #2
  }
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b090      	sub	sp, #64	@ 0x40
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b2e:	e050      	b.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d04c      	beq.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <UART_WaitOnFlagUntilTimeout+0x30>
 8001b3e:	f7fe fec5 	bl	80008cc <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d241      	bcs.n	8001bd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	330c      	adds	r3, #12
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b58:	e853 3f00 	ldrex	r3, [r3]
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b6e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001b70:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b76:	e841 2300 	strex	r3, r2, [r1]
 8001b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1e5      	bne.n	8001b4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3314      	adds	r3, #20
 8001b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	e853 3f00 	ldrex	r3, [r3]
 8001b90:	613b      	str	r3, [r7, #16]
   return(result);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3314      	adds	r3, #20
 8001ba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ba2:	623a      	str	r2, [r7, #32]
 8001ba4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ba6:	69f9      	ldr	r1, [r7, #28]
 8001ba8:	6a3a      	ldr	r2, [r7, #32]
 8001baa:	e841 2300 	strex	r3, r2, [r1]
 8001bae:	61bb      	str	r3, [r7, #24]
   return(result);
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1e5      	bne.n	8001b82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e00f      	b.n	8001bf2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	bf0c      	ite	eq
 8001be2:	2301      	moveq	r3, #1
 8001be4:	2300      	movne	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	461a      	mov	r2, r3
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d09f      	beq.n	8001b30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3740      	adds	r7, #64	@ 0x40
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c00:	b0c0      	sub	sp, #256	@ 0x100
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c18:	68d9      	ldr	r1, [r3, #12]
 8001c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	ea40 0301 	orr.w	r3, r0, r1
 8001c24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001c54:	f021 010c 	bic.w	r1, r1, #12
 8001c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c62:	430b      	orrs	r3, r1
 8001c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c76:	6999      	ldr	r1, [r3, #24]
 8001c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	ea40 0301 	orr.w	r3, r0, r1
 8001c82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8001ec8 <UART_SetConfig+0x2cc>)
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d005      	beq.n	8001c9c <UART_SetConfig+0xa0>
 8001c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b8d      	ldr	r3, [pc, #564]	@ (8001ecc <UART_SetConfig+0x2d0>)
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d104      	bne.n	8001ca6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c9c:	f7ff fe4c 	bl	8001938 <HAL_RCC_GetPCLK2Freq>
 8001ca0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ca4:	e003      	b.n	8001cae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ca6:	f7ff fe33 	bl	8001910 <HAL_RCC_GetPCLK1Freq>
 8001caa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cb8:	f040 810c 	bne.w	8001ed4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001cc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001cca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001cce:	4622      	mov	r2, r4
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	1891      	adds	r1, r2, r2
 8001cd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001cd6:	415b      	adcs	r3, r3
 8001cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cde:	4621      	mov	r1, r4
 8001ce0:	eb12 0801 	adds.w	r8, r2, r1
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	eb43 0901 	adc.w	r9, r3, r1
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfe:	4690      	mov	r8, r2
 8001d00:	4699      	mov	r9, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	eb18 0303 	adds.w	r3, r8, r3
 8001d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d0c:	462b      	mov	r3, r5
 8001d0e:	eb49 0303 	adc.w	r3, r9, r3
 8001d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	18db      	adds	r3, r3, r3
 8001d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d30:	4613      	mov	r3, r2
 8001d32:	eb42 0303 	adc.w	r3, r2, r3
 8001d36:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d40:	f7fe fa54 	bl	80001ec <__aeabi_uldivmod>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4b61      	ldr	r3, [pc, #388]	@ (8001ed0 <UART_SetConfig+0x2d4>)
 8001d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	011c      	lsls	r4, r3, #4
 8001d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d56:	2200      	movs	r2, #0
 8001d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001d60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001d64:	4642      	mov	r2, r8
 8001d66:	464b      	mov	r3, r9
 8001d68:	1891      	adds	r1, r2, r2
 8001d6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001d6c:	415b      	adcs	r3, r3
 8001d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d74:	4641      	mov	r1, r8
 8001d76:	eb12 0a01 	adds.w	sl, r2, r1
 8001d7a:	4649      	mov	r1, r9
 8001d7c:	eb43 0b01 	adc.w	fp, r3, r1
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d94:	4692      	mov	sl, r2
 8001d96:	469b      	mov	fp, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8001d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001da2:	464b      	mov	r3, r9
 8001da4:	eb4b 0303 	adc.w	r3, fp, r3
 8001da8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001db8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	18db      	adds	r3, r3, r3
 8001dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	eb42 0303 	adc.w	r3, r2, r3
 8001dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001dd6:	f7fe fa09 	bl	80001ec <__aeabi_uldivmod>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ed0 <UART_SetConfig+0x2d4>)
 8001de2:	fba3 2301 	umull	r2, r3, r3, r1
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2264      	movs	r2, #100	@ 0x64
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	1acb      	subs	r3, r1, r3
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001df6:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <UART_SetConfig+0x2d4>)
 8001df8:	fba3 2302 	umull	r2, r3, r3, r2
 8001dfc:	095b      	lsrs	r3, r3, #5
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e04:	441c      	add	r4, r3
 8001e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001e18:	4642      	mov	r2, r8
 8001e1a:	464b      	mov	r3, r9
 8001e1c:	1891      	adds	r1, r2, r2
 8001e1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e20:	415b      	adcs	r3, r3
 8001e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e28:	4641      	mov	r1, r8
 8001e2a:	1851      	adds	r1, r2, r1
 8001e2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e2e:	4649      	mov	r1, r9
 8001e30:	414b      	adcs	r3, r1
 8001e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	f04f 0300 	mov.w	r3, #0
 8001e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001e40:	4659      	mov	r1, fp
 8001e42:	00cb      	lsls	r3, r1, #3
 8001e44:	4651      	mov	r1, sl
 8001e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e4a:	4651      	mov	r1, sl
 8001e4c:	00ca      	lsls	r2, r1, #3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	4642      	mov	r2, r8
 8001e56:	189b      	adds	r3, r3, r2
 8001e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001e5c:	464b      	mov	r3, r9
 8001e5e:	460a      	mov	r2, r1
 8001e60:	eb42 0303 	adc.w	r3, r2, r3
 8001e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001e74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	18db      	adds	r3, r3, r3
 8001e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e82:	4613      	mov	r3, r2
 8001e84:	eb42 0303 	adc.w	r3, r2, r3
 8001e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001e92:	f7fe f9ab 	bl	80001ec <__aeabi_uldivmod>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <UART_SetConfig+0x2d4>)
 8001e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	2164      	movs	r1, #100	@ 0x64
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	3332      	adds	r3, #50	@ 0x32
 8001eae:	4a08      	ldr	r2, [pc, #32]	@ (8001ed0 <UART_SetConfig+0x2d4>)
 8001eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	f003 0207 	and.w	r2, r3, #7
 8001eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4422      	add	r2, r4
 8001ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ec4:	e106      	b.n	80020d4 <UART_SetConfig+0x4d8>
 8001ec6:	bf00      	nop
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40011400 	.word	0x40011400
 8001ed0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ede:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ee2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001ee6:	4642      	mov	r2, r8
 8001ee8:	464b      	mov	r3, r9
 8001eea:	1891      	adds	r1, r2, r2
 8001eec:	6239      	str	r1, [r7, #32]
 8001eee:	415b      	adcs	r3, r3
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	1854      	adds	r4, r2, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	eb43 0501 	adc.w	r5, r3, r1
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	00eb      	lsls	r3, r5, #3
 8001f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f0e:	00e2      	lsls	r2, r4, #3
 8001f10:	4614      	mov	r4, r2
 8001f12:	461d      	mov	r5, r3
 8001f14:	4643      	mov	r3, r8
 8001f16:	18e3      	adds	r3, r4, r3
 8001f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	eb45 0303 	adc.w	r3, r5, r3
 8001f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f42:	4629      	mov	r1, r5
 8001f44:	008b      	lsls	r3, r1, #2
 8001f46:	4621      	mov	r1, r4
 8001f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f4c:	4621      	mov	r1, r4
 8001f4e:	008a      	lsls	r2, r1, #2
 8001f50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001f54:	f7fe f94a 	bl	80001ec <__aeabi_uldivmod>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	4b60      	ldr	r3, [pc, #384]	@ (80020e0 <UART_SetConfig+0x4e4>)
 8001f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	011c      	lsls	r4, r3, #4
 8001f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001f74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001f78:	4642      	mov	r2, r8
 8001f7a:	464b      	mov	r3, r9
 8001f7c:	1891      	adds	r1, r2, r2
 8001f7e:	61b9      	str	r1, [r7, #24]
 8001f80:	415b      	adcs	r3, r3
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f88:	4641      	mov	r1, r8
 8001f8a:	1851      	adds	r1, r2, r1
 8001f8c:	6139      	str	r1, [r7, #16]
 8001f8e:	4649      	mov	r1, r9
 8001f90:	414b      	adcs	r3, r1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fa0:	4659      	mov	r1, fp
 8001fa2:	00cb      	lsls	r3, r1, #3
 8001fa4:	4651      	mov	r1, sl
 8001fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001faa:	4651      	mov	r1, sl
 8001fac:	00ca      	lsls	r2, r1, #3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	4642      	mov	r2, r8
 8001fb6:	189b      	adds	r3, r3, r2
 8001fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	eb42 0303 	adc.w	r3, r2, r3
 8001fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001fd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	008b      	lsls	r3, r1, #2
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fea:	4641      	mov	r1, r8
 8001fec:	008a      	lsls	r2, r1, #2
 8001fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001ff2:	f7fe f8fb 	bl	80001ec <__aeabi_uldivmod>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4611      	mov	r1, r2
 8001ffc:	4b38      	ldr	r3, [pc, #224]	@ (80020e0 <UART_SetConfig+0x4e4>)
 8001ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	2264      	movs	r2, #100	@ 0x64
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	3332      	adds	r3, #50	@ 0x32
 8002010:	4a33      	ldr	r2, [pc, #204]	@ (80020e0 <UART_SetConfig+0x4e4>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800201c:	441c      	add	r4, r3
 800201e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002022:	2200      	movs	r2, #0
 8002024:	673b      	str	r3, [r7, #112]	@ 0x70
 8002026:	677a      	str	r2, [r7, #116]	@ 0x74
 8002028:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800202c:	4642      	mov	r2, r8
 800202e:	464b      	mov	r3, r9
 8002030:	1891      	adds	r1, r2, r2
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	415b      	adcs	r3, r3
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800203c:	4641      	mov	r1, r8
 800203e:	1851      	adds	r1, r2, r1
 8002040:	6039      	str	r1, [r7, #0]
 8002042:	4649      	mov	r1, r9
 8002044:	414b      	adcs	r3, r1
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002054:	4659      	mov	r1, fp
 8002056:	00cb      	lsls	r3, r1, #3
 8002058:	4651      	mov	r1, sl
 800205a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800205e:	4651      	mov	r1, sl
 8002060:	00ca      	lsls	r2, r1, #3
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	4603      	mov	r3, r0
 8002068:	4642      	mov	r2, r8
 800206a:	189b      	adds	r3, r3, r2
 800206c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800206e:	464b      	mov	r3, r9
 8002070:	460a      	mov	r2, r1
 8002072:	eb42 0303 	adc.w	r3, r2, r3
 8002076:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	663b      	str	r3, [r7, #96]	@ 0x60
 8002082:	667a      	str	r2, [r7, #100]	@ 0x64
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002090:	4649      	mov	r1, r9
 8002092:	008b      	lsls	r3, r1, #2
 8002094:	4641      	mov	r1, r8
 8002096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800209a:	4641      	mov	r1, r8
 800209c:	008a      	lsls	r2, r1, #2
 800209e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020a2:	f7fe f8a3 	bl	80001ec <__aeabi_uldivmod>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <UART_SetConfig+0x4e4>)
 80020ac:	fba3 1302 	umull	r1, r3, r3, r2
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	2164      	movs	r1, #100	@ 0x64
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	3332      	adds	r3, #50	@ 0x32
 80020be:	4a08      	ldr	r2, [pc, #32]	@ (80020e0 <UART_SetConfig+0x4e4>)
 80020c0:	fba2 2303 	umull	r2, r3, r2, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	f003 020f 	and.w	r2, r3, #15
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4422      	add	r2, r4
 80020d2:	609a      	str	r2, [r3, #8]
}
 80020d4:	bf00      	nop
 80020d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80020da:	46bd      	mov	sp, r7
 80020dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e0:	51eb851f 	.word	0x51eb851f

080020e4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b08c      	sub	sp, #48	@ 0x30
 80020e8:	af00      	add	r7, sp, #0
       - Low Level Initialization
     */
  // Definición de variables iniciales
  delay_t delayStruct;

  HAL_Init();
 80020ea:	f7fe fb8f 	bl	800080c <HAL_Init>

  delayInit(&delayStruct,TIME_DELAY_100);
 80020ee:	f107 0320 	add.w	r3, r7, #32
 80020f2:	2164      	movs	r1, #100	@ 0x64
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f9f1 	bl	80004dc <delayInit>

  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 80020fa:	f000 f83d 	bl	8002178 <SystemClock_Config>
  /* Initialize BSP Led for LED1 */
  /* Initialize BSP Led for LED2 */
  /* Initialize BSP Led for LED3 */
  for(uint8_t i=0;i<3;i++){
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002104:	e00b      	b.n	800211e <main+0x3a>
	  BSP_LED_Init(leds[i]);
 8002106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800210a:	4a19      	ldr	r2, [pc, #100]	@ (8002170 <main+0x8c>)
 800210c:	5cd3      	ldrb	r3, [r2, r3]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fa54 	bl	80005bc <BSP_LED_Init>
  for(uint8_t i=0;i<3;i++){
 8002114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002118:	3301      	adds	r3, #1
 800211a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800211e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002122:	2b02      	cmp	r3, #2
 8002124:	d9ef      	bls.n	8002106 <main+0x22>
  }

  /*Initialize delays for LED  */

  /* Initialize BSP PB for BUTTON_USER */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8002126:	2100      	movs	r1, #0
 8002128:	2000      	movs	r0, #0
 800212a:	f7fe fab1 	bl	8000690 <BSP_PB_Init>

  if(!uartInit()) BSP_LED_On(leds[1]);
 800212e:	f7fe f9ed 	bl	800050c <uartInit>
 8002132:	4603      	mov	r3, r0
 8002134:	f083 0301 	eor.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <main+0x64>
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <main+0x8c>)
 8002140:	785b      	ldrb	r3, [r3, #1]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa8a 	bl	800065c <BSP_LED_On>


  uint8_t WELCOME_MESSAGE1[]= "INICIALIZACION DE UART\n\r";
 8002148:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <main+0x90>)
 800214a:	1d3c      	adds	r4, r7, #4
 800214c:	461d      	mov	r5, r3
 800214e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002152:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002156:	c403      	stmia	r4!, {r0, r1}
 8002158:	7022      	strb	r2, [r4, #0]
  /* Infinite loop */
  while (1)
  {
	  uartSendString(WELCOME_MESSAGE1);
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fa05 	bl	800056c <uartSendString>
	  HAL_Delay(500);
 8002162:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002166:	f7fe fbbd 	bl	80008e4 <HAL_Delay>
	  uartSendString(WELCOME_MESSAGE1);
 800216a:	bf00      	nop
 800216c:	e7f5      	b.n	800215a <main+0x76>
 800216e:	bf00      	nop
 8002170:	20000034 	.word	0x20000034
 8002174:	08002300 	.word	0x08002300

08002178 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b094      	sub	sp, #80	@ 0x50
 800217c:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b2c      	ldr	r3, [pc, #176]	@ (8002234 <SystemClock_Config+0xbc>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <SystemClock_Config+0xbc>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b29      	ldr	r3, [pc, #164]	@ (8002234 <SystemClock_Config+0xbc>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <SystemClock_Config+0xc0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a25      	ldr	r2, [pc, #148]	@ (8002238 <SystemClock_Config+0xc0>)
 80021a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <SystemClock_Config+0xc0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021ba:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80021be:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021c0:	2302      	movs	r3, #2
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021ca:	2308      	movs	r3, #8
 80021cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80021ce:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80021d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80021d8:	2307      	movs	r3, #7
 80021da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe ff25 	bl	8001030 <HAL_RCC_OscConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0x78>
  {
    /* Initialization Error */
    Error_Handler();
 80021ec:	f000 f826 	bl	800223c <Error_Handler>
  }
  
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021f0:	f7fe fece 	bl	8000f90 <HAL_PWREx_EnableOverDrive>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0x86>
  {
    /* Initialization Error */
    Error_Handler();
 80021fa:	f000 f81f 	bl	800223c <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80021fe:	230f      	movs	r3, #15
 8002200:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002202:	2302      	movs	r3, #2
 8002204:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002206:	2300      	movs	r3, #0
 8002208:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 800220a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800220e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8002210:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002216:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800221a:	2105      	movs	r1, #5
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff f97f 	bl	8001520 <HAL_RCC_ClockConfig>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <SystemClock_Config+0xb4>
  {
    /* Initialization Error */
    Error_Handler();
 8002228:	f000 f808 	bl	800223c <Error_Handler>
  }
}
 800222c:	bf00      	nop
 800222e:	3750      	adds	r7, #80	@ 0x50
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000

0800223c <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 8002240:	2001      	movs	r0, #1
 8002242:	f7fe fa0b 	bl	800065c <BSP_LED_On>
  while (1)
 8002246:	bf00      	nop
 8002248:	e7fd      	b.n	8002246 <Error_Handler+0xa>
	...

0800224c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800224c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002284 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002250:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002252:	e003      	b.n	800225c <LoopCopyDataInit>

08002254 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002256:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002258:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800225a:	3104      	adds	r1, #4

0800225c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800225c:	480b      	ldr	r0, [pc, #44]	@ (800228c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800225e:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002260:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002262:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002264:	d3f6      	bcc.n	8002254 <CopyDataInit>
  ldr  r2, =_sbss
 8002266:	4a0b      	ldr	r2, [pc, #44]	@ (8002294 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002268:	e002      	b.n	8002270 <LoopFillZerobss>

0800226a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800226a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800226c:	f842 3b04 	str.w	r3, [r2], #4

08002270 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002272:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002274:	d3f9      	bcc.n	800226a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002276:	f7fe fa61 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227a:	f000 f811 	bl	80022a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227e:	f7ff ff31 	bl	80020e4 <main>
  bx  lr    
 8002282:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002284:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002288:	0800234c 	.word	0x0800234c
  ldr  r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002290:	20000038 	.word	0x20000038
  ldr  r2, =_sbss
 8002294:	20000038 	.word	0x20000038
  ldr  r3, = _ebss
 8002298:	2000009c 	.word	0x2000009c

0800229c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC_IRQHandler>
	...

080022a0 <__libc_init_array>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	4d0d      	ldr	r5, [pc, #52]	@ (80022d8 <__libc_init_array+0x38>)
 80022a4:	4c0d      	ldr	r4, [pc, #52]	@ (80022dc <__libc_init_array+0x3c>)
 80022a6:	1b64      	subs	r4, r4, r5
 80022a8:	10a4      	asrs	r4, r4, #2
 80022aa:	2600      	movs	r6, #0
 80022ac:	42a6      	cmp	r6, r4
 80022ae:	d109      	bne.n	80022c4 <__libc_init_array+0x24>
 80022b0:	4d0b      	ldr	r5, [pc, #44]	@ (80022e0 <__libc_init_array+0x40>)
 80022b2:	4c0c      	ldr	r4, [pc, #48]	@ (80022e4 <__libc_init_array+0x44>)
 80022b4:	f000 f818 	bl	80022e8 <_init>
 80022b8:	1b64      	subs	r4, r4, r5
 80022ba:	10a4      	asrs	r4, r4, #2
 80022bc:	2600      	movs	r6, #0
 80022be:	42a6      	cmp	r6, r4
 80022c0:	d105      	bne.n	80022ce <__libc_init_array+0x2e>
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
 80022c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022c8:	4798      	blx	r3
 80022ca:	3601      	adds	r6, #1
 80022cc:	e7ee      	b.n	80022ac <__libc_init_array+0xc>
 80022ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d2:	4798      	blx	r3
 80022d4:	3601      	adds	r6, #1
 80022d6:	e7f2      	b.n	80022be <__libc_init_array+0x1e>
 80022d8:	08002344 	.word	0x08002344
 80022dc:	08002344 	.word	0x08002344
 80022e0:	08002344 	.word	0x08002344
 80022e4:	08002348 	.word	0x08002348

080022e8 <_init>:
 80022e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ea:	bf00      	nop
 80022ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ee:	bc08      	pop	{r3}
 80022f0:	469e      	mov	lr, r3
 80022f2:	4770      	bx	lr

080022f4 <_fini>:
 80022f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022f6:	bf00      	nop
 80022f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022fa:	bc08      	pop	{r3}
 80022fc:	469e      	mov	lr, r3
 80022fe:	4770      	bx	lr
